{
  "elements": [
    {
      "description": "Set render clear color. This is the color that appears on the screen where nothing is rendered, i.e. background.", 
      "parameters": [
        {
          "doc": "color to use as clear color", 
          "name": "color"
        }
      ], 
      "brief": "set clear color", 
      "examples": "<pre>\nmsg.post(\"@render:\", \"clear_color\", { color = vmath.vector4(1, 0, 0, 0) } )\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "clear_color"
    }, 
    {
      "description": "Draw a line on the screen. This should mostly be used for debugging purposes.", 
      "parameters": [
        {
          "doc": "Start point of the line", 
          "name": "start_point"
        }, 
        {
          "doc": "End point of the line", 
          "name": "end_point"
        }, 
        {
          "doc": "Color of the line", 
          "name": "color"
        }
      ], 
      "brief": "draw a line on the screen", 
      "examples": "<pre>\n-- draw a white line from (200, 200) to (200, 300)\nmsg.post(\"@render:\", \"draw_line\", { start_point = vmath.vector3(200, 200, 0), end_point = vmath.vector3(200, 300, 0), color = vmath.vector4(1, 1, 1, 1) } )\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "draw_line"
    }, 
    {
      "description": "Draw a text on the screen. This should mostly be used for debugging purposes.", 
      "parameters": [
        {
          "doc": "Position of the text", 
          "name": "position"
        }, 
        {
          "doc": "The text to draw", 
          "name": "text"
        }
      ], 
      "brief": "draw a text on the screen", 
      "examples": "<pre>\nmsg.post(\"@render:\", \"draw_text\", { text = \"Hello world!\", position = vmath.vector3(200, 200, 0) } )\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "draw_text"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_CONSTANT_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_CONSTANT_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_DST_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_DST_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_CONSTANT_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_CONSTANT_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_DST_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_DST_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_SRC_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ONE_MINUS_SRC_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_SRC_ALPHA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_SRC_ALPHA_SATURATE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_SRC_COLOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BLEND_ZERO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BUFFER_COLOR_BIT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BUFFER_DEPTH_BIT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.BUFFER_STENCIL_BIT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_ALWAYS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_EQUAL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_GEQUAL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_GREATER"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_LEQUAL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_LESS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_NEVER"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.COMPARE_FUNC_NOTEQUAL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FACE_BACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FACE_FRONT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FACE_FRONT_AND_BACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FILTER_LINEAR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FILTER_NEAREST"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_DEPTH"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_LUMINANCE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGB"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGBA"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGBA_DXT1"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGBA_DXT3"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGBA_DXT5"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_RGB_DXT1"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.FORMAT_STENCIL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STATE_BLEND"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STATE_CULL_FACE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STATE_DEPTH_TEST"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STATE_POLYGON_OFFSET_FILL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STATE_STENCIL_TEST"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_DECR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_DECR_WRAP"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_INCR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_INCR_WRAP"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_INVERT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_KEEP"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_REPLACE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.STENCIL_OP_ZERO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.WRAP_CLAMP_TO_BORDER"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.WRAP_CLAMP_TO_EDGE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.WRAP_MIRRORED_REPEAT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "render.WRAP_REPEAT"
    }, 
    {
      "description": "Clear buffers in the currently enabled render target with specified value.", 
      "parameters": [
        {
          "doc": "Table with keys specifying which buffers to clear and values set to clear values. Available keys are:\n<ul>\n    <li><code>render.BUFFER_COLOR_BIT</code></li>\n    <li><code>render.BUFFER_DEPTH_BIT</code></li>\n    <li><code>render.BUFFER_STENCIL_BIT</code></li>\n</ul>", 
          "name": "buffers"
        }
      ], 
      "brief": "clears the active render target", 
      "examples": "<pre>\nrender.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0, 0, 0, 0), [render.BUFFER_DEPTH_BIT] = 1})\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.clear"
    }, 
    {
      "description": "Constant buffers are used to set shader program variables and are optionally passed to the <code>render.draw()</code>\nfunction. The buffer's constant elements can be indexed like an ordinary Lua table, but you can't iterate\nover them with pairs() or ipairs().", 
      "parameters": [], 
      "brief": "create a new constant buffer.", 
      "examples": "<p>Set a \"tint\" constant in a constant buffer in the render script:</p>\n<pre>\nlocal constants = render.constant_buffer()\nconstants.tint = vmath.vector4(1, 1, 1, 1)\n</pre>\n<p>Then use the constant buffer when drawing a predicate:</p>\n<pre>\nrender.draw(self.my_pred, constants)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "new constant buffer", 
      "name": "render.constant_buffer"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target to delete (render_target)", 
          "name": "render_target"
        }
      ], 
      "brief": "deletes a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.delete_render_target"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "disables the currently enabled material", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.disable_material"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target to disable (render_target)", 
          "name": "render_target"
        }
      ], 
      "brief": "disables a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.disable_render_target"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "state to enable (constant)\n<ul>\n  <li><code>render.STATE_DEPTH_TEST</code></li>\n  <li><code>render.STATE_STENCIL_TEST</code></li>\n  <li><code>render.STATE_BLEND</code></li>\n  <li><code>render.STATE_CULL_FACE</code></li>\n  <li><code>render.STATE_POLYGON_OFFSET_FILL</code></li>\n</ul>", 
          "name": "state"
        }
      ], 
      "brief": "disables a render state", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.disable_state"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "texture unit to enable disable for (number)", 
          "name": "unit"
        }, 
        {
          "doc": "render target for which to disable the specified texture unit (render_target)", 
          "name": "render_target"
        }
      ], 
      "brief": "disables a texture for a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.disable_texture"
    }, 
    {
      "description": "Draws all objects that match a specified predicate. An optional constants buffer can be\nprovided to override the default constants. If no constants buffer is provided, a default\nsystem constants buffer is used containing constants as defined in materials and set through\n<code>*.set_constant()</code> and <code>*.reset_constant()</code> on visual components.", 
      "parameters": [
        {
          "doc": "predicate to draw for (predicate)", 
          "name": "predicate"
        }, 
        {
          "doc": "optional constants to use while rendering (constants buffer)", 
          "name": "constants"
        }
      ], 
      "brief": "draws all objects matching a predicate", 
      "examples": "<pre>\nfunction init(self)\n    self.tile_pred = render.predicate({\"tile\"})\n    ...\nend\n\nfunction update(self)\n    ...\n    render.draw(self.tile_pred)\n    ...\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.draw"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "draws all 2d debug graphics (Deprecated)", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.draw_debug2d"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "draws all 3d debug graphics", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.draw_debug3d"
    }, 
    {
      "description": "If another material was already enabled, it will be automatically disabled.", 
      "parameters": [
        {
          "doc": "material id to enable (string)", 
          "name": "material_id"
        }
      ], 
      "brief": "enables a material", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.enable_material"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target to enable (render_target)", 
          "name": "render_target"
        }
      ], 
      "brief": "enables a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.enable_render_target"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "state to enable (constant)\n<ul>\n  <li><code>render.STATE_DEPTH_TEST</code></li>\n  <li><code>render.STATE_STENCIL_TEST</code></li>\n  <li><code>render.STATE_BLEND</code></li>\n  <li><code>render.STATE_ALPHA_TEST</code> (not available on iOS and Android)</li>\n  <li><code>render.STATE_CULL_FACE</code></li>\n  <li><code>render.STATE_POLYGON_OFFSET_FILL</code></li>\n</ul>", 
          "name": "state"
        }
      ], 
      "brief": "enables a render state", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.enable_state"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "texture unit to enable texture for (number)", 
          "name": "unit"
        }, 
        {
          "doc": "render target from which to enable the specified texture unit (render_target)", 
          "name": "render_target"
        }, 
        {
          "doc": "buffer type from which to enable the texture (constant)", 
          "name": "buffer_type"
        }
      ], 
      "brief": "enables a texture for a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.enable_texture"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "gets the window height, as specified for the project", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "specified window height (number)", 
      "name": "render.get_height"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target from which to retrieve the buffer height", 
          "name": "render_target"
        }, 
        {
          "doc": "which type of buffer to retrieve the height from", 
          "name": "buffer_type"
        }
      ], 
      "brief": "retrieve a buffer height from a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.get_render_target_height"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target from which to retrieve the buffer width", 
          "name": "render_target"
        }, 
        {
          "doc": "which type of buffer to retrieve the width from", 
          "name": "buffer_type"
        }
      ], 
      "brief": "retrieve a buffer width from a render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.get_render_target_width"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "gets the window width, as specified for the project", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "specified window width (number)", 
      "name": "render.get_width"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "gets the window height", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "actual window height (number)", 
      "name": "render.get_window_height"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "gets the actual window width", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "actual window width (number)", 
      "name": "render.get_window_width"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "table of tags that the predicate should match (table)", 
          "name": "predicates"
        }
      ], 
      "brief": "creates a new render predicate", 
      "examples": "<pre>\nlocal p = render.predicate({\"opaque\", \"smoke\"})\n</pre>", 
      "type": "FUNCTION", 
      "return_": "new predicate (predicate)", 
      "name": "render.predicate"
    }, 
    {
      "description": "Available keys for the render target parameters table:\n<table>\n  <th>Keys</th><th>Values</th>\n  <tr><td>\"format\"</td><td>\n     render.FORMAT_LUMINANCE<br/>\n     render.FORMAT_RGB<br/>\n     render.FORMAT_RGBA<br/>\n     render.FORMAT_RGB_DXT1<br/>\n     render.FORMAT_RGBA_DXT1<br/>\n     render.FORMAT_RGBA_DXT3<br/>\n     render.FORMAT_RGBA_DXT5<br/>\n     render.FORMAT_DEPTH<br/>\n     render.FORMAT_STENCIL<br/>\n    </td></tr>\n  <tr><td>\"width\"</td><td>number</td></tr>\n  <tr><td>\"height\"</td><td>number</td></tr>\n  <tr><td>\"min_filter\"</td><td>\n     render.FILTER_LINEAR<br/>\n     render.FILTER_NEAREST<br/>\n    </td></tr>\n  <tr><td>\"mag_filter\"</td><td>\n     render.FILTER_LINEAR<br/>\n     render.FILTER_NEAREST<br/>\n    </td></tr>\n  <tr><td>\"u_wrap\"</td><td>\n     render.WRAP_CLAMP_TO_BORDER<br/>\n     render.WRAP_CLAMP_TO_EDGE<br/>\n     render.WRAP_MIRRORED_REPEAT<br/>\n     render.WRAP_REPEAT<br/>\n    </td></tr>\n  <tr><td>\"v_wrap\"</td><td>\n     render.WRAP_CLAMP_TO_BORDER<br/>\n     render.WRAP_CLAMP_TO_EDGE<br/>\n     render.WRAP_MIRRORED_REPEAT<br/>\n     render.WRAP_REPEAT<br/>\n    </td></tr>\n</table>", 
      "parameters": [
        {
          "doc": "render target name (string)", 
          "name": "name"
        }, 
        {
          "doc": "table of all parameters, see the description for available keys and values (table)", 
          "name": "parameters"
        }
      ], 
      "brief": "creates a new render target", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "new render target (render_target)", 
      "name": "render.render_target"
    }, 
    {
      "description": "Available factors:\n<ul>\n  <li><code>render.BLEND_ZERO</code></li>\n  <li><code>render.BLEND_ONE</code></li>\n  <li><code>render.BLEND_SRC_COLOR</code></li>\n  <li><code>render.BLEND_ONE_MINUS_SRC_COLOR</code></li>\n  <li><code>render.BLEND_DST_COLOR</code></li>\n  <li><code>render.BLEND_ONE_MINUS_DST_COLOR</code></li>\n  <li><code>render.BLEND_SRC_ALPHA</code></li>\n  <li><code>render.BLEND_ONE_MINUS_SRC_ALPHA</code></li>\n  <li><code>render.BLEND_DST_ALPHA</code></li>\n  <li><code>render.BLEND_ONE_MINUS_DST_ALPHA</code></li>\n  <li><code>render.BLEND_SRC_ALPHA_SATURATE</code></li>\n  <li><code>render.BLEND_CONSTANT_COLOR</code></li>\n  <li><code>render.BLEND_ONE_MINUS_CONSTANT_COLOR</code></li>\n  <li><code>render.BLEND_CONSTANT_ALPHA</code></li>\n  <li><code>render.BLEND_ONE_MINUS_CONSTANT_ALPHA</code></li>\n</ul>", 
      "parameters": [
        {
          "doc": "source factor", 
          "name": "source_factor"
        }, 
        {
          "doc": "destination factor", 
          "name": "destination_factor"
        }
      ], 
      "brief": "sets the blending function", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_blend_func"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "red mask (boolean)", 
          "name": "red"
        }, 
        {
          "doc": "green mask (boolean)", 
          "name": "green"
        }, 
        {
          "doc": "blue mask (boolean)", 
          "name": "blue"
        }, 
        {
          "doc": "alpha mask (boolean)", 
          "name": "alpha"
        }
      ], 
      "brief": "sets the color mask", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_color_mask"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "face type (constant)\n<ul>\n  <li><code>render.FACE_FRONT</code></li>\n  <li><code>render.FACE_BACK</code></li>\n  <li><code>render.FACE_FRONT_AND_BACK</code></li>\n</ul>", 
          "name": "face_type"
        }
      ], 
      "brief": "sets the cull face", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_cull_face"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "depth test function (constant)\n<ul>\n  <li><code>render.COMPARE_FUNC_NEVER</code></li>\n  <li><code>render.COMPARE_FUNC_LESS</code></li>\n  <li><code>render.COMPARE_FUNC_LEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_GREATER</code></li>\n  <li><code>render.COMPARE_FUNC_GEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_EQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_NOTEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_ALWAYS</code></li>\n</ul>", 
          "name": "func"
        }
      ], 
      "brief": "sets the depth test function", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_depth_func"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "depth mask (boolean)", 
          "name": "depth"
        }
      ], 
      "brief": "sets the depth mask", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_depth_mask"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "polygon offset factor (number)", 
          "name": "factor"
        }, 
        {
          "doc": "polygon offset units (number)", 
          "name": "units"
        }
      ], 
      "brief": "sets the polygon offset", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_polygon_offset"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "projection matrix (matrix4)", 
          "name": "matrix"
        }
      ], 
      "brief": "sets the projection matrix", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_projection"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "render target to set size for (render_target)", 
          "name": "render_target"
        }, 
        {
          "doc": "new render target width (number)", 
          "name": "width"
        }, 
        {
          "doc": "new render target height (number)", 
          "name": "height"
        }
      ], 
      "brief": "sets the render target size", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_render_target_size"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "stencil test function (constant)\n<ul>\n  <li><code>render.COMPARE_FUNC_NEVER</code></li>\n  <li><code>render.COMPARE_FUNC_LESS</code></li>\n  <li><code>render.COMPARE_FUNC_LEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_GREATER</code></li>\n  <li><code>render.COMPARE_FUNC_GEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_EQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_NOTEQUAL</code></li>\n  <li><code>render.COMPARE_FUNC_ALWAYS</code></li>\n</ul>", 
          "name": "func"
        }, 
        {
          "doc": "reference value for the stencil test (number)", 
          "name": "ref"
        }, 
        {
          "doc": "mask that is ANDed with both the reference value and the stored stencil value when the test is done (number)", 
          "name": "mask"
        }
      ], 
      "brief": "sets the stencil test function", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_stencil_func"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "stencil mask (number)", 
          "name": "mask"
        }
      ], 
      "brief": "sets the stencil mask", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_stencil_mask"
    }, 
    {
      "description": "Available operators:\n<ul>\n  <li><code>render.STENCIL_OP_KEEP</code></li>\n  <li><code>render.STENCIL_OP_ZERO</code></li>\n  <li><code>render.STENCIL_OP_REPLACE</code></li>\n  <li><code>render.STENCIL_OP_INCR</code></li>\n  <li><code>render.STENCIL_OP_INCR_WRAP</code></li>\n  <li><code>render.STENCIL_OP_DECR</code></li>\n  <li><code>render.STENCIL_OP_DECR_WRAP</code></li>\n  <li><code>render.STENCIL_OP_INVERT</code></li>\n</ul>", 
      "parameters": [
        {
          "doc": "action to take when the stencil test fails (constant)", 
          "name": "sfail"
        }, 
        {
          "doc": "the stencil action when the stencil test passes (constant)", 
          "name": "dpfail"
        }, 
        {
          "doc": "the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled (constant)", 
          "name": "dppass"
        }
      ], 
      "brief": "sets the stencil operator", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_stencil_op"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "view matrix to set (matrix4)", 
          "name": "matrix"
        }
      ], 
      "brief": "sets the view matrix", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_view"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "left corner (number)", 
          "name": "x"
        }, 
        {
          "doc": "bottom corner (number)", 
          "name": "y"
        }, 
        {
          "doc": "viewport width (number)", 
          "name": "width"
        }, 
        {
          "doc": "viewport height (number)", 
          "name": "height"
        }
      ], 
      "brief": "sets the render viewport", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "render.set_viewport"
    }, 
    {
      "description": "Reports a change in window size. This is initiated on window resize on desktop or by orientation changes\non mobile devices.", 
      "parameters": [
        {
          "doc": "the new window height (number)", 
          "name": "height"
        }, 
        {
          "doc": "the new window width (number)", 
          "name": "width"
        }
      ], 
      "brief": "reports a window size change", 
      "examples": "<pre>\nfunction on_message(self, message_id, message)\n    -- check for the message\n    if message_id == hash(\"window_resized\") then\n        -- the window was resized.\n    end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "window_resized"
    }
  ]
}