{
  "elements": [
    {
      "description": "", 
      "parameters": [], 
      "brief": "get the current Facebook access token", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "the access token (string)", 
      "name": "access_token"
    }, 
    {
      "description": "This function will disable event usage for Facebook Analytics which means\nthat Facebook won't be able to use event data for ad-tracking. Events will\nstill be sent to Facebook for insights.\n\n<b>NOTE!</b> Event usage cannot be controlled and is always enabled for the\nFacebook Canvas platform, therefore this function has no effect on Facebook\nCanvas.", 
      "parameters": [], 
      "brief": "Disable event usage with Facebook Analytics", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "disable_event_usage"
    }, 
    {
      "description": "This function will enable event usage for Facebook Analytics which means\nthat Facebook will be able to use event data for ad-tracking.\n\n<b>NOTE!</b> Event usage cannot be controlled and is always enabled for the\nFacebook Canvas platform, therefore this function has no effect on Facebook\nCanvas.", 
      "parameters": [], 
      "brief": "Enable event usage with Facebook Analytics", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "enable_event_usage"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Publish permission to reach everyone.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.AUDIENCE_EVERYONE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Publish permission to reach user friends.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.AUDIENCE_FRIENDS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Publish permission to reach no audience.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.AUDIENCE_NONE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Publish permission to reach only me (private to current user).", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.AUDIENCE_ONLYME"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when the user has entered their payment info.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_ADDED_PAYMENT_INFO"
    }, 
    {
      "description": "value_to_sum passed to facebook.post_event should be the item's price.", 
      "parameters": [], 
      "brief": "Log this event when the user has added an item to their cart. The", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_ADDED_TO_CART"
    }, 
    {
      "description": "value_to_sum passed to facebook.post_event should be the item's price.", 
      "parameters": [], 
      "brief": "Log this event when the user has added an item to their wishlist. The", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_ADDED_TO_WISHLIST"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when a user has completed registration with the app.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_COMPLETED_REGISTRATION"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when the user has completed a tutorial in the app.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_COMPLETED_TUTORIAL"
    }, 
    {
      "description": "value_to_sum passed to facebook.post_event should be the total price in\nthe cart.", 
      "parameters": [], 
      "brief": "Log this event when the user has entered the checkout process. The", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_INITIATED_CHECKOUT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when the user has completed a purchase.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_PURCHASED"
    }, 
    {
      "description": "value_to_sum  passed to facebook.post_event should be the numeric rating.", 
      "parameters": [], 
      "brief": "Log this event when the user has rated an item in the app. The", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_RATED"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when a user has performed a search within the app.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_SEARCHED"
    }, 
    {
      "description": "passed to facebook.post_event should be the number of credits spent.\n\n<p>\n<b>NOTE!</b> This event is currently an undocumented event in the Facebook\nSDK.\n</p>", 
      "parameters": [], 
      "brief": "Log this event when the user has spent app credits. The value_to_sum", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_SPENT_CREDITS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when measuring the time between user sessions.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_TIME_BETWEEN_SESSIONS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when the user has unlocked an achievement in the app.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_UNLOCKED_ACHIEVEMENT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Log this event when a user has viewed a form of content in the app.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.EVENT_VIEWED_CONTENT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Game Request action type \"askfor\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_ACTIONTYPE_ASKFOR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Game Request action type \"none\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_ACTIONTYPE_NONE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Game Request action type \"send\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_ACTIONTYPE_SEND"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Game Request action type \"turn\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_ACTIONTYPE_TURN"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Gamerequest filter type \"app_non_users\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_FILTER_APPNONUSERS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Gamerequest filter type \"app_users\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_FILTER_APPUSERS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Gamerequest filter type \"none\" for \"apprequest\" dialog", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.GAMEREQUEST_FILTER_NONE"
    }, 
    {
      "description": "being logged about. Could be an EAN, article identifier, etc., depending\n on the nature of the app.", 
      "parameters": [], 
      "brief": "Parameter key used to specify an ID for the specific piece of content", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_CONTENT_ID"
    }, 
    {
      "description": "event, e.g. \"music\", \"photo\", \"video\". Options to use will vary based upon\n what the app is all about.", 
      "parameters": [], 
      "brief": "Parameter key used to specify a generic content type/family for the logged", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_CONTENT_TYPE"
    }, 
    {
      "description": "\"EUR\", \"GBP\". See ISO-4217 for specific values.", 
      "parameters": [], 
      "brief": "Parameter key used to specify currency used with logged event. E.g. \"USD\",", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_CURRENCY"
    }, 
    {
      "description": "logged. E.g., the name of the achievement unlocked in the\n facebook.EVENT_UNLOCKED_ACHIEVEMENT event.", 
      "parameters": [], 
      "brief": "Parameter key used to specify a description appropriate to the event being", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_DESCRIPTION"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Parameter key used to specify the level achieved.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_LEVEL"
    }, 
    {
      "description": "facebook.EVENT_RATED event. E.g., \"5\" or \"10\".", 
      "parameters": [], 
      "brief": "Parameter key used to specify the maximum rating available for the", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_MAX_RATING_VALUE"
    }, 
    {
      "description": "facebook.EVENT_INITIATED_CHECKOUT or facebook.EVENT_PURCHASED event.", 
      "parameters": [], 
      "brief": "Parameter key used to specify how many items are being processed for an", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_NUM_ITEMS"
    }, 
    {
      "description": "facebook.EVENT_INITIATED_CHECKOUT event.", 
      "parameters": [], 
      "brief": "Parameter key used to specify whether payment info is available for the", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_PAYMENT_INFO_AVAILABLE"
    }, 
    {
      "description": "app, e.g., \"Facebook\", \"email\", \"Twitter\", etc.", 
      "parameters": [], 
      "brief": "Parameter key used to specify method user has used to register for the", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_REGISTRATION_METHOD"
    }, 
    {
      "description": "operation.", 
      "parameters": [], 
      "brief": "Parameter key used to specify the string provided by the user for a search", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_SEARCH_STRING"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "Parameter key used to specify source application package.", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_SOURCE_APPLICATION"
    }, 
    {
      "description": "successful or not.", 
      "parameters": [], 
      "brief": "Parameter key used to specify whether the activity being logged about was", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.PARAM_SUCCESS"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "The Facebook login session has closed because login failed", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.STATE_CLOSED_LOGIN_FAILED"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "The Facebook login session is open", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "facebook.STATE_OPEN"
    }, 
    {
      "description": "This function opens a Facebook login dialog allowing the user to log into Facebook\nwith his/her account. This performs a login requesting read permission for:\n<ul>\n  <li><code>\"public_profile\"</code></li>\n  <li><code>\"email\"</code></li>\n  <li><code>\"user_friends\"</code></li>\n</ul>\nThe actual permission that the user grants can be retrieved with <code>facebook.permissions()</code>.", 
      "parameters": [
        {
          "doc": "callback function with parameters (self, status, error), when the login attempt is done. (function)", 
          "name": "callback"
        }
      ], 
      "brief": "initiate a Facebook login", 
      "examples": "<pre>\nfacebook.login(function (self, status, error)\n    if error or status ~= facebook.STATE_OPEN then\n        print(\"Facebook log in error: \" .. status)\n        return\n    end\nend)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "login"
    }, 
    {
      "description": "Logout from Facebook.", 
      "parameters": [], 
      "brief": "logout from Facebook", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "logout"
    }, 
    {
      "description": "This function returns a table of user data as requested from the Facebook Graph API\n\"me\" path. The user data is fetched during facebook.login().\n\nThe table contains the following fields:\n\n<ul>\n  <li><code>\"name\"</code></li>\n  <li><code>\"last_name\"</code></li>\n  <li><code>\"first_name\"</code></li>\n  <li><code>\"id\"</code></li>\n  <li><code>\"email\"</code></li>\n  <li><code>\"link\"</code></li>\n  <li><code>\"gender\"</code></li>\n  <li><code>\"locale\"</code></li>\n  <li><code>\"updated_time\"</code></li>\n</ul>", 
      "parameters": [], 
      "brief": "return a table with \"me\" user data", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "table with user data fields (table)", 
      "name": "me"
    }, 
    {
      "description": "This function returns a table with all the currently granted permission strings.", 
      "parameters": [], 
      "brief": "get the currently granted permissions", 
      "examples": "<pre>\nfor _,permission in ipairs(facebook.permissions()) do\n    if permission == \"user_likes\" then\n        -- \"user_likes\" granted...\n        break\n    end\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "the permissions (table)", 
      "name": "permissions"
    }, 
    {
      "description": "This function will post an event to Facebook Analytics where it can be used\nin the Facebook Insights system.", 
      "parameters": [
        {
          "doc": "(constant|text) An event can either be one of the predefined\nconstants below or a text which can be used to define a custom event that is\nregistered with Facebook Analytics.\n<ul>\n    <li>facebook.EVENT_ACHIEVED_LEVEL</li>\n    <li>facebook.EVENT_ACTIVATED_APP</li>\n    <li>facebook.EVENT_ADDED_PAYMENT_INFO</li>\n    <li>facebook.EVENT_ADDED_TO_CART</li>\n    <li>facebook.EVENT_ADDED_TO_WISHLIST</li>\n    <li>facebook.EVENT_COMPLETED_REGISTRATION</li>\n    <li>facebook.EVENT_COMPLETED_TUTORIAL</li>\n    <li>facebook.EVENT_DEACTIVATED_APP</li>\n    <li>facebook.EVENT_INITIATED_CHECKOUT</li>\n    <li>facebook.EVENT_PURCHASED</li>\n    <li>facebook.EVENT_RATED</li>\n    <li>facebook.EVENT_SEARCHED</li>\n    <li>facebook.EVENT_SESSION_INTERRUPTIONS</li>\n    <li>facebook.EVENT_SPENT_CREDITS</li>\n    <li>facebook.EVENT_TIME_BETWEEN_SESSIONS</li>\n    <li>facebook.EVENT_UNLOCKED_ACHIEVEMENT</li>\n    <li>facebook.EVENT_VIEWED_CONTENT</li>\n</ul>", 
          "name": "event"
        }, 
        {
          "doc": "(number) A numeric value for the event. This should\nrepresent the value of the event, such as the level achieved, price for an\nitem or number of orcs killed.", 
          "name": "value_to_sum"
        }, 
        {
          "doc": "(table) A table with parameters and their values. A key in the\ntable can either be one of the predefined constants below or a text which\ncan be used to define a custom parameter. Optional argument.\n<ul>\n    <li>facebook.PARAM_CONTENT_ID</li>\n    <li>facebook.PARAM_CONTENT_TYPE</li>\n    <li>facebook.PARAM_CURRENCY</li>\n    <li>facebook.PARAM_DESCRIPTION</li>\n    <li>facebook.PARAM_LEVEL</li>\n    <li>facebook.PARAM_MAX_RATING_VALUE</li>\n    <li>facebook.PARAM_NUM_ITEMS</li>\n    <li>facebook.PARAM_PAYMENT_INFO_AVAILABLE</li>\n    <li>facebook.PARAM_REGISTRATION_METHOD</li>\n    <li>facebook.PARAM_SEARCH_STRING</li>\n    <li>facebook.PARAM_SOURCE_APPLICATION</li>\n    <li>facebook.PARAM_SUCCESS</li>\n</ul>", 
          "name": "params"
        }
      ], 
      "brief": "post an event to Facebook Analytics", 
      "examples": "<pre>\nparams = {facebook.PARAM_LEVEL = 30, facebook.PARAM_NUM_ITEMS = 2};\nfacebook.post_event(facebook.EVENT_SPENT_CREDITS, 25, params);\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "post_event"
    }, 
    {
      "description": "Log in the user on Facebook with the specified publish permissions. Check the permissions the user\n actually granted with <code>facebook.permissions()</code>.", 
      "parameters": [
        {
          "doc": "a table with the requested permissions (table)", 
          "name": "permissions"
        }, 
        {
          "doc": "(constant|number)\n<ul>\n    <li>facebook.AUDIENCE_NONE</li>\n    <li>facebook.AUDIENCE_ONLYME</li>\n    <li>facebook.AUDIENCE_FRIENDS</li>\n    <li>facebook.AUDIENCE_EVERYONE</li>\n</ul>", 
          "name": "audience"
        }, 
        {
          "doc": "callback function with parameters (self, error) that is called when the permission request dialog is closed. (function)", 
          "name": "callback"
        }
      ], 
      "brief": "logs the user in with the requested publish permissions", 
      "examples": "<pre>\nfacebook.request_publish_permissions({ \"user_friends\", \"email\" }, function (self, error)\n    if error then\n        -- Something bad happened\n        return\n    end\nend)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "request_publish_permissions"
    }, 
    {
      "description": "Log in the user on Facebook with the specified read permissions. Check the permissions the user\nactually granted with <code>facebook.permissions()</code>.", 
      "parameters": [
        {
          "doc": "a table with the requested permission strings (table)\nThe following strings are valid permission identifiers and are requested by default on login:\n<ul>\n  <li><code>\"public_profile\"</code></li>\n  <li><code>\"email\"</code></li>\n  <li><code>\"user_friends\"</code></li>\n</ul>\nA comprehensive list of permissions can be found at https://developers.facebook.com/docs/facebook-login/permissions/v2.4", 
          "name": "permissions"
        }, 
        {
          "doc": "callback function with parameters (self, error) that is called when the permission request dialog is closed. (function)", 
          "name": "callback"
        }
      ], 
      "brief": "logs the user in with the requested read permissions", 
      "examples": "<pre>\nfacebook.request_read_permissions({ \"user_friends\", \"email\" }, function (self, error)\n    if error then\n        -- Something bad happened\n        return\n    end\nend)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "request_read_permissions"
    }, 
    {
      "description": "Display a Facebook web dialog of the type specified in the <code>dialog</code> parameter.\nThe <code>param</code> table should be set up according to the requirements of each dialog\ntype. Note that some parameters are mandatory. Below is the list of available dialogs and\nwhere to find Facebook's developer documentation on parameters and response data.\n\n<code>apprequest</code>\n\nShows a Game Request dialog. Game Requests allows players to invite their friends to play a\ngame. Available parameters:\n\n<ul>\n  <li><code>title</code> (string)</li>\n  <li><code>message</code> (string)</li>\n  <li><code>action_type</code> (number)</li>\n  <li><code>filters</code> (number)</li>\n  <li><code>data</code> (string)</li>\n  <li><code>object_id</code> (string)</li>\n  <li><code>suggestions</code> (table)</li>\n  <li><code>recipients</code> (table)</li>\n  <li><code>to</code> (string)</li>\n</ul>\n\nOn success, the \"result\" table parameter passed to the callback function will include the following fields:\n<ul>\n  <li><code>request_id</code> (string)</li>\n  <li><code>to</code> (table)</li>\n</ul>\n\nDetails for each parameter: https://developers.facebook.com/docs/games/requests/v2.4#params\n\n<code>feed</code>\n\nThe Feed Dialog allows people to publish individual stories to their timeline.\n\n<ul>\n  <li><code>caption</code> (string)</li>\n  <li><code>description</code> (string)</li>\n  <li><code>picture</code> (string)</li>\n  <li><code>link</code> (string)</li>\n  <li><code>people_ids</code> (table)</li>\n  <li><code>place_id</code> (string)</li>\n  <li><code>ref</code> (string)</li>\n</ul>\n\nOn success, the \"result\" table parameter passed to the callback function will include the following fields:\n<ul>\n  <li><code>post_id</code> (string)</li>\n</ul>\n\nDetails for each parameter: https://developers.facebook.com/docs/sharing/reference/feed-dialog/v2.4#params\n\n<code>appinvite</code>\n\nThe App Invite dialog is available only on iOS and Android. Note that the <code>url</code> parameter\ncorresponds to the appLinkURL (iOS) and setAppLinkUrl (Android) properties.\n\n<ul>\n  <li><code>url</code> (string)</li>\n  <li><code>preview_image</code> (string)</li>\n</ul>\n\nDetails for each parameter: https://developers.facebook.com/docs/reference/ios/current/class/FBSDKAppInviteContent/", 
      "parameters": [
        {
          "doc": "dialog to show. \"apprequest\", \"feed\" or \"appinvite\" (string)", 
          "name": "dialog"
        }, 
        {
          "doc": "table with dialog parameters (table)", 
          "name": "param"
        }, 
        {
          "doc": "callback function with parameters (self, result, error) that is called when the dialog is closed. Result is table with an url-field set. (function)", 
          "name": "callback"
        }
      ], 
      "brief": "show facebook web dialog", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "show_dialog"
    }
  ]
}