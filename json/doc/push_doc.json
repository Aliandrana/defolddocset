{
  "elements": [
    {
      "description": "", 
      "parameters": [], 
      "brief": "alert notification type", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "push.NOTIFICATION_ALERT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "badge notification type", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "push.NOTIFICATION_BADGE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "sound notification type", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "push.NOTIFICATION_SOUND"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "local push origin", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "push.ORIGIN_LOCAL"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "remote push origin", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "push.ORIGIN_REMOTE"
    }, 
    {
      "description": "Use this function to cancel a previously scheduled local push notification. The\nnotification is identified by a numeric id as returned by +push.schedule()+.", 
      "parameters": [
        {
          "doc": "the numeric id of the local push notification (number)", 
          "name": "id"
        }
      ], 
      "brief": "Cancel a scheduled local push notification", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "push.cancel"
    }, 
    {
      "description": "Returns a table with all data associated with all scheduled local push notifications.\nThe table contains key, value pairs where the key is the push notification id and the\nvalue is a table with the notification data, corresponding to the data given by\npush.get_scheduled(id).", 
      "parameters": [], 
      "brief": "Retrieve data on all scheduled local push notifications", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "data table with all data associated with all scheduled notifications (table)", 
      "name": "push.get_all_scheduled"
    }, 
    {
      "description": "Returns a table with all data associated with a specified local push notification.\nThe notification is identified by a numeric id as returned by +push.schedule()+.", 
      "parameters": [
        {
          "doc": "the numeric id of the local push notification (number)", 
          "name": "id"
        }
      ], 
      "brief": "Retrieve data on a scheduled local push notification", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "data table with all data associated with the notification (table)", 
      "name": "push.get_scheduled"
    }, 
    {
      "description": "Send a request for push notifications. Note that the notifications table parameter\nis iOS only and will be ignored on Android.", 
      "parameters": [
        {
          "doc": "the types of notifications to listen to. (iOS only) (table)", 
          "name": "notifications"
        }, 
        {
          "doc": "register callback function (function)", 
          "name": "callback"
        }
      ], 
      "brief": "Register for push notifications", 
      "examples": "<p>\nRegister for push notifications on iOS. Note that the token needs to be converted on this platform.\n</p>\n<pre>\nlocal function push_listener(self, payload, origin)\n     -- The payload arrives here.\nend\n\nfunction init(self)\n     local alerts = {push.NOTIFICATION_BADGE, push.NOTIFICATION_SOUND, push.NOTIFICATION_ALERT}\n     push.register(alerts, function (self, token, error)\n     if token then\n          -- NOTE: %02x to pad byte with leading zero\n          local token_string = \"\"\n          for i = 1,#token do\n              token_string = token_string .. string.format(\"%02x\", string.byte(token, i))\n          end\n          print(token_string)\n          push.set_listener(push_listener)\n     else\n          -- Push registration failed.\n          print(error.error)\n     end\nend\n</pre>\n\n<p>\nRegister for push notifications on Android.\n</p>\n<pre>\nlocal function push_listener(self, payload, origin)\n     -- The payload arrives here.\nend\n\nfunction init(self)\n     push.register(nil, function (self, token, error)\n     if token then\n          print(token)\n          push.set_listener(push_listener)\n     else\n          -- Push registration failed.\n          print(error.error)\n     end\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "push.register"
    }, 
    {
      "description": "Notification settings is a platform specific table of data that can contain the following fields:\n\n<table>\n  <th>Field</th>\n  <th>Description</th>\n  <tr><td><code>action</code></td><td>(iOS only). The alert action string to be used as the title of the\n         right button of the alert or the value of the unlock slider, where the value replaces\n         \"unlock\" in \"slide to unlock\" text. (string)</td></tr>\n  <tr><td><code>badge_count</code></td><td>(iOS only). The numeric value of the icon badge. (number)</td></tr>\n  <tr><td><code>badge_number</code></td><td>Deprecated. Use badge_count instead</td></tr>\n  <tr><td><code>priority</code></td><td>(Android only). The priority is a hint to the device UI about how the notification\nshould be displayed. There are five priority levels, from -2 to 2 where -1 is the lowest priority\nand 2 the highest. Unless specified, a default priority level of 2 is used. (number)</td></tr>\n</table>", 
      "parameters": [
        {
          "doc": "number of seconds into the future until the notification should be triggered (number)", 
          "name": "time"
        }, 
        {
          "doc": "localized title to be displayed to the user if the application is not running (string)", 
          "name": "title"
        }, 
        {
          "doc": "localized body message of the notification to be displayed to the user if the application is not running (string)", 
          "name": "alert"
        }, 
        {
          "doc": "JSON string to be passed to the registered listener function (string)", 
          "name": "payload"
        }, 
        {
          "doc": "table with notification and platform specific data (table)", 
          "name": "notification_settings"
        }
      ], 
      "brief": "Schedule a local push notification to be triggered at a specific time in the future", 
      "examples": "<p>\nThis example demonstrates how to schedule a local notification.\n</p>\n<pre>\n-- Schedule a local push in 3 seconds\nlocal payload = '{ \"data\" : { \"field\" : \"Some value\", \"field2\" : \"Other value\" } }'\nid, err = push.schedule(3, \"Update!\", \"There are new stuff in the app\", payload, { action = \"check it out\" })\nif err then\n     -- Something went wrong\n     ...\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "err error string if something went wrong, otherwise nil (string)", 
      "name": "push.schedule"
    }, 
    {
      "description": "Set the badge count for application icon.\nNOTE: This function is only available on iOS.", 
      "parameters": [
        {
          "doc": "badge count (number)", 
          "name": "count"
        }
      ], 
      "brief": "set badge icon count", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "push.set_badge_count"
    }, 
    {
      "description": "The listener callback has the following signature: function(self, payload, origin) where payload is a table\nwith the push payload.", 
      "parameters": [
        {
          "doc": "listener callback function (function)", 
          "name": "listener"
        }
      ], 
      "brief": "set push listener", 
      "examples": "<p>\nSet the push notification listener.\n</p>\n<pre>\nlocal function push_listener(self, payload, origin)\n     -- The payload arrives here.\n     pprint(payload)\n     if origin == push.ORIGIN_LOCAL then\n         -- This was a local push\n         ...\n     end\n\n     if origin == push.ORIGIN_REMOTE then\n         -- This was a remote push\n         ...\n     end\nend\n\nlocal init(self)\n     ...\n     -- Assuming that push.register() has been successfully called earlier\n     push.set_listener(push_listener)\nend", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "push.set_listener"
    }
  ]
}