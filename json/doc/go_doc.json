{
  "elements": [
    {
      "description": "<p>\nPost this message to a game object instance to make that instance acquire the user input focus.\n</p>\n<p>\nUser input is distributed by the engine to every instance that has requested it. The last instance\nto request focus will receive it first. This means that the scripts in the instance will have\nfirst-hand-chance at reacting on user input, possibly consuming it so that no other instances\ncan react on it. The most common case is for a script to send this message to itself when it needs to\nrespond to user input.\n</p>\n<p>\nA script belonging to an instance which has the user input focus will receive the input actions\nin its <code>on_input</code> callback function. See <code>on_input</code> for more information on\nhow user input can be handled.\n</p>", 
      "parameters": [], 
      "brief": "acquires the user input focus", 
      "examples": "<p>\nThis example demonstrates how to acquire and act on user input.\n</p>\n<pre>\nfunction init(self)\n    -- acquire input focus as soon as the instance has been initialized\n    msg.post(\".\", \"acquire_input_focus\")\nend\n\nfunction on_input(self, action_id, action)\n    -- check which input we received\n    if action_id == hash(\"my_action\") then\n        -- act on the input\n        self.my_action_amount = action.value\n    end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "acquire_input_focus"
    }, 
    {
      "description": "<p>\nThis message disables the receiving component. For more information what this actually means, please see the message <code>enable</code>.\n</p>\n\n<P>\n<b>Note!</b> Not all components support this message yet. Supported components are:\n<ul>\n  <li>Collection Proxy</li>\n  <li>Collision Object</li>\n  <li>Gui</li>\n  <li>Sprite</li>\n</ul>\n</p>", 
      "parameters": [], 
      "brief": "disables the receiving component", 
      "examples": "Disable the component \"my_component\":\n<pre>\nmsg.post(\"#my_component\", \"disable\")\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "disable"
    }, 
    {
      "description": "<p>\nThis message enables the receiving component. All components are enabled by default, which means they will receive updates\nand be a part of the simulation. A component is disabled when it receives the <code>disable</code> message. For more details\nabout the effects on each component, see the <it>User Guide</it>.\n</p>\n\n<P>\n<b>Note!</b> Not all components support this message yet. Supported components are:\n<ul>\n  <li>Collection Proxy</li>\n  <li>Collision Object</li>\n  <li>Gui</li>\n  <li>Sprite</li>\n</ul>\n</p>", 
      "parameters": [], 
      "brief": "enables the receiving component", 
      "examples": "<p>\nEnable the component \"my_component\":\n</p>\n<pre>\nmsg.post(\"#my_component\", \"enable\")\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "enable"
    }, 
    {
      "description": "<div>This is a callback-function, which is called by the engine when a script component is finalized (destroyed). It can\nbe used to e.g. take some last action, report the finalization to other game object instances, delete spawned objects\nor release user input focus (see <code>release_input_focus</code>).</div>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }
      ], 
      "brief": "called when a script component is finalized", 
      "examples": "<pre>\nfunction final(self)\n    -- report finalization\n    msg.post(\"my_friend_instance\", \"im_dead\", {my_stats = self.some_value})\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "final"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-back", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INBACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-bounce", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INBOUNCE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-circlic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INCIRC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-cubic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INCUBIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-elastic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INELASTIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-exponential", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INEXPO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-back", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTBACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-bounce", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTBOUNCE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-circlic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTCIRC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-cubic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTCUBIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-elastic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTELASTIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-exponential", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTEXPO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-quadratic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTQUAD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-quartic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTQUART"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-quintic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTQUINT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-out-sine", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INOUTSINE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-quadratic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INQUAD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-quartic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INQUART"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-quintic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INQUINT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "in-sine", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_INSINE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "linear interpolation", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_LINEAR"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-back", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTBACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-bounce", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTBOUNCE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-circlic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTCIRC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-cubic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTCUBIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-elastic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTELASTIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-exponential", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTEXPO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-back", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINBACK"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-bounce", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINBOUNCE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-circlic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINCIRC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-cubic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINCUBIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-elastic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINELASTIC"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-exponential", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINEXPO"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-quadratic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINQUAD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-quartic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINQUART"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-quintic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINQUINT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-in-sine", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTINSINE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-quadratic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTQUAD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-quartic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTQUART"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-quintic", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTQUINT"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "out-sine", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.EASING_OUTSINE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "loop backward", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_LOOP_BACKWARD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "loop forward", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_LOOP_FORWARD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "ping pong loop", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_LOOP_PINGPONG"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "no playback", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_NONE"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "once backward", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_ONCE_BACKWARD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "once forward", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_ONCE_FORWARD"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "once ping pong", 
      "examples": "", 
      "type": "VARIABLE", 
      "return_": "", 
      "name": "go.PLAYBACK_ONCE_PINGPONG"
    }, 
    {
      "description": "<p>\nThis is only supported for numerical properties. If the node property is already being\nanimated, that animation will be canceled and replaced by the new one.\n</p>\n<p>\nIf a <code>complete_function</code> (lua function) is specified, that function will be called when the animation has completed.\nBy starting a new animation in that function, several animations can be sequenced together. See the examples for more information.\n\n<b>NOTE!</b> If you call <code>go.animate()</code> from a game object's <code>final()</code> function, any passed\n<code>complete_function</code> will be ignored and never called upon animation completion.\n</p>\n<p>\nSee the <a href=\"/doc/properties\">properties guide</a> for which properties can be animated and how.\n</p>", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property (hash|string|url)", 
          "name": "url"
        }, 
        {
          "doc": "name of the property to animate (hash|string)", 
          "name": "property"
        }, 
        {
          "doc": "playback mode of the animation (constant)\n<ul>\n  <li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n  <li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n  <li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n  <li><code>go.PLAYBACK_LOOP_FORWARD</code></li>\n  <li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>\n  <li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "playback"
        }, 
        {
          "doc": "target property value (number|vector3|vector4|quaternion)", 
          "name": "to"
        }, 
        {
          "doc": "easing to use during animation. Either specify a constant, see the <a href=\"/doc/properties\">properties guide</a> for a complete list, or a vmath.vector with a curve. (constant|vector)", 
          "name": "easing"
        }, 
        {
          "doc": "duration of the animation in seconds (number)", 
          "name": "duration"
        }, 
        {
          "doc": "delay before the animation starts in seconds (number)", 
          "name": "[delay]"
        }, 
        {
          "doc": "function with parameters (self, url, property) to call when the animation has completed (function)", 
          "name": "[complete_function]"
        }
      ], 
      "brief": "animates a named property of the specified game object or component", 
      "examples": "<p>Animate the position of a game object to x = 10 during 1 second, then y = 20 during 1 second:</p>\n<pre>\nlocal function x_done(self, url, property)\n    go.animate(go.get_id(), \"position.y\", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, 1)\nend\nfunction init(self)\n    go.animate(go.get_id(), \"position.x\", go.PLAYBACK_ONCE_FORWARD, 10, go.EASING_LINEAR, 1, 0, x_done)\nend\n</pre>\n\n<p>Animate the y positin of a game object using a crazy custom easing curve:</p>\n<pre>\nfunction init(self)\n    local values = { 0, 0, 0, 0, 0, 0, 0, 0,\n                     1, 1, 1, 1, 1, 1, 1, 1,\n                     0, 0, 0, 0, 0, 0, 0, 0,\n                     1, 1, 1, 1, 1, 1, 1, 1,\n                     0, 0, 0, 0, 0, 0, 0, 0,\n                     1, 1, 1, 1, 1, 1, 1, 1,\n                     0, 0, 0, 0, 0, 0, 0, 0,\n                     1, 1, 1, 1, 1, 1, 1, 1 }\n     local vec = vmath.vector(values)\n     go.animate(\"go\", \"position.y\", go.PLAYBACK_LOOP_PINGPONG, 100, vec, 2.0)\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.animate"
    }, 
    {
      "description": "<p>\nBy calling this function, all stored animations of the given property will be canceled.\n</p>\n<p>\nSee the <a href=\"/doc/properties\">properties guide</a> for which properties can be animated and how.\n</p>", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property (hash|string|url)", 
          "name": "url"
        }, 
        {
          "doc": "name of the property to animate (hash|string)", 
          "name": "property"
        }
      ], 
      "brief": "cancels all animations of the named property of the specified game object or component", 
      "examples": "<p>Cancel the animation of the position of a game object:</p>\n<pre>\ngo.cancel_animations(go.get_id(), \"position\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.cancel_animations"
    }, 
    {
      "description": "<div>Delete a game object identified by its id.</div>", 
      "parameters": [
        {
          "doc": "optional id of the instance to delete, the instance of the calling script is deleted by default (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "deletes a game object instance", 
      "examples": "<p>\nThis example demonstrates how to delete a game object with the id \"my_game_object\".\n</p>\n<pre>\nlocal id = go.get_id(\"my_game_object\") -- retrieve the id of the game object to be deleted\ngo.delete(id) -- delete the game object\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.delete"
    }, 
    {
      "description": "<div>Delete all game objects simultaneously as listed in table.\nThe table values (not keys) should be game object ids (hashes).</div>", 
      "parameters": [
        {
          "doc": "table with values of instance ids (hashes) to be deleted", 
          "name": "[ids]"
        }
      ], 
      "brief": "deletes a set of game object instance", 
      "examples": "<p>\nAn example how to delete game objects listed in a table\n</p>\n<pre>\n-- List the objects to be deleted\nlocal ids = { hash(\"/my_object_1\"), hash(\"/my_object_2\"), hash(\"/my_object_3\") }\ngo.delete_all(ids)\n</pre>\n<p>\nAn example how to delete game objects spawned via a collectionfactory\n</p>\n<pre>\n-- Spawn a collection of game objects.\nlocal ids = collectionfactory.create(\"#collectionfactory\")\n...\n-- Delete all objects listed in the table 'ids'.\ngo.delete_all(ids)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.delete_all"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property (hash|string|url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the property to retrieve (hash|string)", 
          "name": "id"
        }
      ], 
      "brief": "gets a named property of the specified game object or component", 
      "examples": "<p>Get a property \"speed\" from a script \"player\", the property must be declared in the player-script:</p>\n<pre>\ngo.property(\"speed\", 50)\n</pre>\n<p>Then in the calling script (assumed to belong to the same game object, but does not have to):</p>\n<pre>\nlocal speed = go.get(\"#player\", \"speed\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "the value of the specified property (number|hash|url|vector3|vector4|quaternion|boolean)", 
      "name": "go.get"
    }, 
    {
      "description": "The instance id is a hash of the absolute path.\nIf <code>path</code> is specified, it can either be absolute or relative to the instance of the calling script.\nIf <code>path</code> is not specified, the id of the instance of the calling script will be returned. See the examples below for more information.", 
      "parameters": [
        {
          "doc": "path of the instance for which to return the id (string)", 
          "name": "[path]"
        }
      ], 
      "brief": "gets the id of an instance", 
      "examples": "<p>\nFor the instance with path <code>/my_sub_collection/my_instance</code>, the following calls are equivalent:\n</p>\n<pre>\nlocal id = go.get_id() -- no path, defaults to the instance of the calling script\nlocal id = go.get_id(\"/my_sub_collection/my_instance\") -- absolute path\n</pre>\n<p>\nFrom a script in another instance in the same collection, i.e. path <code>/my_sub_collection/my_other_instance</code>, the id of the first instance can be retrieved in two ways:\n</p>\n<pre>\nlocal id = go.get_id(\"my_instance\") -- relative path\nlocal id = go.get_id(\"/my_sub_collection/my_instance\") -- absolute path\n</pre>", 
      "type": "FUNCTION", 
      "return_": "instance id (hash)", 
      "name": "go.get_id"
    }, 
    {
      "description": "The position is relative the parent (if any). Use <code>go.get_world_position</code> to retrieve the global world position.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the position for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the position of the instance", 
      "examples": "<p>Get the position of the instance the script is attached to:</p>\n<pre>\nlocal p = go.get_position()\n</pre>\n<p>Get the position of another instance \"x\":</p>\n<pre>\nlocal p = go.get_position(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "instance position (vector3)", 
      "name": "go.get_position"
    }, 
    {
      "description": "The rotation is relative to the parent (if any). Use <code>go.get_world_rotation</code> to retrieve the global world position.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the rotation for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the rotation of the instance", 
      "examples": "<p>Get the rotation of the instance the script is attached to:</p>\n<pre>\nlocal r = go.get_rotation()\n</pre>\n<p>Get the rotation of another instance \"x\":</p>\n<pre>\nlocal r = go.get_rotation(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "instance rotation (quaternion)", 
      "name": "go.get_rotation"
    }, 
    {
      "description": "The uniform scale is relative the parent (if any). Use <code>go.get_world_scale</code> to retrieve the global world scale factor.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the scale for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the uniform scale factor of the instance", 
      "examples": "<p>Get the scale of the instance the script is attached to:</p>\n<pre>\nlocal s = go.get_scale()\n</pre>\n<p>Get the scale of another instance \"x\":</p>\n<pre>\nlocal s = go.get_scale(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "uniform instance scale factor (number)", 
      "name": "go.get_scale"
    }, 
    {
      "description": "The scale is relative the parent (if any). Use <code>go.get_world_scale</code> to retrieve the global world scale factor.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the scale for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the 3D scale factor of the instance", 
      "examples": "<p>Get the scale of the instance the script is attached to:</p>\n<pre>\nlocal s = go.get_scale_vector()\n</pre>\n<p>Get the scale of another instance \"x\":</p>\n<pre>\nlocal s = go.get_scale_vector(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "scale factor (vector3)", 
      "name": "go.get_scale_vector"
    }, 
    {
      "description": "Use <code>go.get_position</code> to retrieve the position relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the world position for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the instance world position", 
      "examples": "<p>Get the world position of the instance the script is attached to:</p>\n<pre>\nlocal p = go.get_world_position()\n</pre>\n<p>Get the world position of another instance \"x\":</p>\n<pre>\nlocal p = go.get_world_position(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "instance world position (vector3)", 
      "name": "go.get_world_position"
    }, 
    {
      "description": "Use <code>go.get_rotation</code> to retrieve the rotation relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the world rotation for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the instance world rotation", 
      "examples": "<p>Get the world rotation of the instance the script is attached to:</p>\n<pre>\nlocal r = go.get_world_rotation()\n</pre>\n<p>Get the world rotation of another instance \"x\":</p>\n<pre>\nlocal r = go.get_world_rotation(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "instance world rotation (quaternion)", 
      "name": "go.get_world_rotation"
    }, 
    {
      "description": "Use <code>go.get_scale</code> to retrieve the scale factor relative to the parent.", 
      "parameters": [
        {
          "doc": "optional id of the instance to get the world scale for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "gets the instance world scale factor", 
      "examples": "<p>Get the world scale of the instance the script is attached to:</p>\n<pre>\nlocal s = go.get_world_scale()\n</pre>\n<p>Get the world scale of another instance \"x\":</p>\n<pre>\nlocal s = go.get_world_scale(\"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "uniform instance world scale factor (number)", 
      "name": "go.get_world_scale"
    }, 
    {
      "description": "This function defines a property which can then be used in the script through the self-reference.\nThe properties defined this way are automatically exposed in the editor in game objects and collections which use the script.\nNote that you can only use this function outside any callback-functions like init and update.", 
      "parameters": [
        {
          "doc": "the name of the property (string)", 
          "name": "name"
        }, 
        {
          "doc": "default value of the property. In the case of a url, only the empty constructor msg.url() is allowed. (number|hash|url|vector3|vector4|quaternion)", 
          "name": "value"
        }
      ], 
      "brief": "define a property to be used throughout the script", 
      "examples": "<p>\nThis example demonstrates how to define a property called \"health\" in a script.\nThe health is decreased whenever someone sends a message called \"take_damage\" to the script.\n</p>\n<pre>\ngo.property(\"health\", 100)\n\nfunction init(self)\n    -- prints 100 to the output\n    print(self.health)\nend\n\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"take_damage\") then\n        self.health = self.health - message.damage\n        print(\"Ouch! My health is now: \" .. self.health)\n    end\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.property"
    }, 
    {
      "description": "NOTE! Don't use this function, WIP!", 
      "parameters": [
        {
          "doc": "x-coordinate of the screen space position (number)", 
          "name": "x"
        }, 
        {
          "doc": "y-coordinate of the screen space position (number)", 
          "name": "y"
        }
      ], 
      "brief": "constructs a ray in world space from a position in screen space", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "position and direction of the ray in world space (vector3, vector3)", 
      "name": "go.screen_ray"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "url of the game object or component having the property (hash|string|url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the property to set (hash|string)", 
          "name": "id"
        }, 
        {
          "doc": "the value to set (number|hash|url|vector3|vector4|quaternion|boolean)", 
          "name": "value"
        }
      ], 
      "brief": "sets a named property of the specified game object or component", 
      "examples": "<p>Set a property \"speed\" of a script \"player\", the property must be declared in the player-script:</p>\n<pre>\ngo.property(\"speed\", 50)\n</pre>\n<p>Then in the calling script (assumed to belong to the same game object, but does not have to):</p>\n<pre>\ngo.set(\"#player\", \"speed\", 100)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.set"
    }, 
    {
      "description": "The position is relative to the parent (if any). The global world position cannot be manually set.", 
      "parameters": [
        {
          "doc": "position to set (vector3)", 
          "name": "position"
        }, 
        {
          "doc": "optional id of the instance to set the position for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "sets the position of the instance", 
      "examples": "<p>Set the position of the instance the script is attached to:</p>\n<pre>\nlocal p = ...\ngo.set_position(p)\n</pre>\n<p>Set the position of another instance \"x\":</p>\n<pre>\nlocal p = ...\ngo.set_position(p, \"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.set_position"
    }, 
    {
      "description": "The rotation is relative to the parent (if any). The global world rotation cannot be manually set.", 
      "parameters": [
        {
          "doc": "rotation to set (quaternion)", 
          "name": "rotation"
        }, 
        {
          "doc": "optional id of the instance to get the rotation for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "sets the rotation of the instance", 
      "examples": "<p>Set the rotation of the instance the script is attached to:</p>\n<pre>\nlocal r = ...\ngo.set_rotation(r)\n</pre>\n<p>Set the rotation of another instance \"x\":</p>\n<pre>\nlocal r = ...\ngo.set_rotation(r, \"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.set_rotation"
    }, 
    {
      "description": "The scale factor is relative to the parent (if any). The global world scale factor cannot be manually set.\n\n<b>NOTE!</b> Physics are currently not affected when setting scale from this function.", 
      "parameters": [
        {
          "doc": "vector or uniform scale factor, must be greater than 0 (number|vector3)", 
          "name": "scale"
        }, 
        {
          "doc": "optional id of the instance to get the scale for, by default the instance of the calling script (hash|string|url)", 
          "name": "[id]"
        }
      ], 
      "brief": "sets the scale factor of the instance", 
      "examples": "<p>Set the scale of the instance the script is attached to:</p>\n<pre>\nlocal s = vmath.vector3(2.0, 1.0, 1.0)\ngo.set_scale(s)\n</pre>\n<p>Set the scale of another instance \"x\":</p>\n<pre>\nlocal s = 1.2\ngo.set_scale(s, \"x\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "go.set_scale"
    }, 
    {
      "description": "This is a callback-function, which is called by the engine when a script component is initialized. It can be used\nto set the initial state of the script.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }
      ], 
      "brief": "called when a script component is initialized", 
      "examples": "<pre>\nfunction init(self)\n    -- set up useful data\n    self.my_value = 1\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "init"
    }, 
    {
      "description": "<p>\nThis is a callback-function, which is called by the engine when user input is sent to the game object instance of the script.\nIt can be used to take action on the input, e.g. move the instance according to the input.\n</p>\n<p>\nFor an instance to obtain user input, it must first acquire input focuse through the message <code>acquire_input_focus</code>.\nSee the documentation of that message for more information.\n</p>\n<p>\nThe <code>action</code> parameter is a table containing data about the input mapped to the <code>action_id</code>.\nFor mapped actions it specifies the value of the input and if it was just pressed or released.\nActions are mapped to input in an input_binding-file.\n</p>\n<p>\nMouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.\nThe <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.\n</p>\n<p>\nHere is a brief description of the available table fields:\n</p>\n<table>\n  <th>Field</th>\n  <th>Description</th>\n  <tr><td><code>value</code></td><td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement.</td></tr>\n  <tr><td><code>pressed</code></td><td>If the input was pressed this frame, 0 for false and 1 for true. This is not present for mouse movement.</td></tr>\n  <tr><td><code>released</code></td><td>If the input was released this frame, 0 for false and 1 for true. This is not present for mouse movement.</td></tr>\n  <tr><td><code>repeated</code></td><td>If the input was repeated this frame, 0 for false and 1 for true. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement.</td></tr>\n  <tr><td><code>x</code></td><td>The x value of a pointer device, if present.</td></tr>\n  <tr><td><code>y</code></td><td>The y value of a pointer device, if present.</td></tr>\n  <tr><td><code>screen_x</code></td><td>The screen space x value of a pointer device, if present.</td></tr>\n  <tr><td><code>screen_y</code></td><td>The screen space y value of a pointer device, if present.</td></tr>\n  <tr><td><code>dx</code></td><td>The change in x value of a pointer device, if present.</td></tr>\n  <tr><td><code>dy</code></td><td>The change in y value of a pointer device, if present.</td></tr>\n  <tr><td><code>screen_dx</code></td><td>The change in screen space x value of a pointer device, if present.</td></tr>\n  <tr><td><code>screen_dy</code></td><td>The change in screen space y value of a pointer device, if present.</td></tr>\n  <tr><td><code>touch</code></td><td>List of touch input, one element per finger, if present. See table below about touch input</td></tr>\n</table>\n\n<p>\nTouch input table:\n</p>\n<table>\n  <th>Field</th>\n  <th>Description</th>\n  <tr><td><code>pressed</code></td><td>True if the finger was pressed this frame.</td></tr>\n  <tr><td><code>released</code></td><td>True if the finger was released this frame.</td></tr>\n  <tr><td><code>tap_count</code></td><td>Number of taps, one for single, two for double-tap, etc</td></tr>\n  <tr><td><code>x</code></td><td>The x touch location.</td></tr>\n  <tr><td><code>y</code></td><td>The y touch location.</td></tr>\n  <tr><td><code>dx</code></td><td>The change in x value.</td></tr>\n  <tr><td><code>dy</code></td><td>The change in y value.</td></tr>\n  <tr><td><code>acc_x</code></td><td>Accelerometer x value (if present).</td></tr>\n  <tr><td><code>acc_y</code></td><td>Accelerometer y value (if present).</td></tr>\n  <tr><td><code>acc_z</code></td><td>Accelerometer z value (if present).</td></tr>\n</table>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }, 
        {
          "doc": "id of the received input action, as mapped in the input_binding-file (hash)", 
          "name": "action_id"
        }, 
        {
          "doc": "a table containing the input data, see above for a description (table)", 
          "name": "action"
        }
      ], 
      "brief": "called when user input is received", 
      "examples": "<p>\nThis example demonstrates how a game object instance can be moved as a response to user input.\n</p>\n<pre>\nfunction init(self)\n    -- acquire input focus\n    msg.post(\".\", \"acquire_input_focus\")\n    -- maximum speed the instance can be moved\n    self.max_speed = 2\n    -- velocity of the instance, initially zero\n    self.velocity = vmath.vector3()\nend\n\nfunction update(self, dt)\n    -- move the instance\n    go.set_position(go.get_position() + dt * self.velocity)\nend\n\nfunction on_input(self, action_id, action)\n    -- check for movement input\n    if action_id == hash(\"right\") then\n        if action.released then -- reset velocity if input was released\n            self.velocity = vmath.vector3()\n        else -- update velocity\n            self.velocity = vmath.vector3(action.value * self.max_speed, 0, 0)\n        end\n    end\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false (boolean)", 
      "name": "on_input"
    }, 
    {
      "description": "<p>\nThis is a callback-function, which is called by the engine whenever a message has been sent to the script component.\nIt can be used to take action on the message, e.g. send a response back to the sender of the message.\n</p>\n<p>\nThe <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the\ndocumentation of the message specifies which data is supplied.\n</p>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }, 
        {
          "doc": "id of the received message (hash)", 
          "name": "message_id"
        }, 
        {
          "doc": "a table containing the message data (table)", 
          "name": "message"
        }, 
        {
          "doc": "address of the sender (url)", 
          "name": "sender"
        }
      ], 
      "brief": "called when a message has been sent to the script component", 
      "examples": "<p>\nThis example demonstrates how a game object instance, called \"a\", can communicate with another instance, called \"b\". It\nis assumed that both script components of the instances has id \"script\".\n</p>\n<p>\nScript of instance \"a\":\n</p>\n<pre>\nfunction init(self)\n    -- let b know about some important data\n    msg.post(\"b#script\", \"my_data\", {important_value = 1})\nend\n</pre>\n<p>\nScript of intance \"b\":\n</p>\n<pre>\nfunction init(self)\n    -- store the url of instance \"a\" for later use, by specifying nil as socket we\n    -- automatically use our own socket\n    self.a_url = msg.url(nil, go.get_id(\"a\"), \"script\")\nend\n\nfunction on_message(self, message_id, message, sender)\n    -- check message and sender\n    if message_id == hash(\"my_data\") and sender == self.a_url then\n        -- use the data in some way\n        self.important_value = message.important_value\n    end\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "on_message"
    }, 
    {
      "description": "<p>\nThis is a callback-function, which is called by the engine when the script component is reloaded, e.g. from the editor.\nIt can be used for live development, e.g. to tweak constants or set up the state properly for the instance.\n</p>", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }
      ], 
      "brief": "called when the script component is reloaded", 
      "examples": "<p>\nThis example demonstrates how to tweak the speed of a game object instance that is moved on user input.\n</p>\n<pre>\nfunction init(self)\n    -- acquire input focus\n    msg.post(\".\", \"acquire_input_focus\")\n    -- maximum speed the instance can be moved, this value is tweaked in the on_reload function below\n    self.max_speed = 2\n    -- velocity of the instance, initially zero\n    self.velocity = vmath.vector3()\nend\n\nfunction update(self, dt)\n    -- move the instance\n    go.set_position(go.get_position() + dt * self.velocity)\nend\n\nfunction on_input(self, action_id, action)\n    -- check for movement input\n    if action_id == hash(\"right\") then\n        if action.released then -- reset velocity if input was released\n            self.velocity = vmath.vector3()\n        else -- update velocity\n            self.velocity = vmath.vector3(action.value * self.max_speed, 0, 0)\n        end\n    end\nend\n\nfunction on_reload(self)\n    -- edit this value and reload the script component\n    self.max_speed = 100\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "on_reload"
    }, 
    {
      "description": "Post this message to an instance to make that instance release the user input focus.\nSee <code>acquire_input_focus</code> for more information on how the user input handling\nworks.", 
      "parameters": [], 
      "brief": "releases the user input focus", 
      "examples": "How to make a game object stop receiving input:\n<pre>\nmsg.post(\".\", \"release_input_focus\")\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "release_input_focus"
    }, 
    {
      "description": "<div><b>DEPRECATED!</b> See the functions <code>go.get_position</code>, <code>go.get_rotation</code>, etc. for a simpler way to obtain the transform of another game object instance.</div>\nSend this message to an instance to request its transform (position, rotation, scale).\nThe sending script will receive the answer as a <code>transform_response</code>-message\nat a later time.", 
      "parameters": [], 
      "brief": "(DEPRECATED) requests the transform from an instance", 
      "examples": "<p>\nHow to obtain the position of another game object instance:\n</p>\n<pre>\nfunction init(self)\n    -- create a url to the interesting instance for later use, assuming the instance has id \"my_friend_instance\"\n    self.friend_url = msg.url(\"my_friend_instance\")\nend\n\nfunction update(self, dt)\n    -- request the transform\n    msg.post(self.friend_url, \"request_transform\")\n    -- check if we have received the position yet\n    if self.my_friends_position then\n        -- do something useful with the position\n    end\nend\n\nfunction on_message(self, message_id, message, sender)\n    -- check if its the transform response\n    if message_id == hash(\"transform_response\") then\n        -- if it comes from the right instance (in case we send out several queries to different instances)\n        if sender == self.friend_url then\n            -- store the position so we can use it in the update-function\n            self.my_friends_position = message.position\n        end\n    end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "request_transform"
    }, 
    {
      "description": "When this message is sent to an instance, it sets the parent of that instance. This means that the instance will exist\nin the geometrical space of its parent, like a basic transformation hierarchy or scene graph. If no parent is specified,\nthe instance will be detached from any parent and exist in world space. A script can send this message to itself to set\nthe parent of its instance.", 
      "parameters": [
        {
          "doc": "the id of the new parent (hash)", 
          "name": "parent_id"
        }, 
        {
          "doc": "if the world transform of the instance should be preserved when changing spaces, 0 for false and 1 for true (number)", 
          "name": "keep_world_transform"
        }
      ], 
      "brief": "sets the parent of the receiving instance", 
      "examples": "<p>\nAttach myself to another instance \"my_parent\":\n</p>\n<pre>\nmsg.post(\".\", \"set_parent\", {parent_id = go.get_id(\"my_parent\")})\n</pre>\n<p>\nAttach an instance \"my_instance\" to another instance \"my_parent\":\n</p>\n<pre>\nmsg.post(\"my_instance\", \"set_parent\", {parent_id = go.get_id(\"my_parent\")})\n</pre>\n<p>\nDetach an instance \"my_instance\" from its parent (if any):\n</p>\n<pre>\nmsg.post(\"my_instance\", \"set_parent\")\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "set_parent"
    }, 
    {
      "description": "<div><b>DEPRECATED!</b> See the functions <code>go.get_position</code>, <code>go.get_rotation</code>, etc. for a simpler way to obtain the transform of another game object instance.</div>\nThe response a script receives after it has requested the transform from an instance\nusing the <code>request_transform</code>-message. See the description of that message\nfor a complete example on how to use it.", 
      "parameters": [
        {
          "doc": "local position of the instance (vector3)", 
          "name": "position"
        }, 
        {
          "doc": "local rotation of the instance (quaternion)", 
          "name": "rotation"
        }, 
        {
          "doc": "local scale of the instance (number)", 
          "name": "scale"
        }, 
        {
          "doc": "world position of the instance (vector3)", 
          "name": "world_position"
        }, 
        {
          "doc": "world rotation of the instancee (quaternion)", 
          "name": "world_rotation"
        }, 
        {
          "doc": "world scale of the instance (number)", 
          "name": "world_scale"
        }
      ], 
      "brief": "(DEPRECATED) reports back the transform of an instance", 
      "examples": "", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "transform_response"
    }, 
    {
      "description": "This is a callback-function, which is called by the engine every frame to update the state of a script component.\nIt can be used to perform any kind of game related tasks, e.g. moving the game object instance.", 
      "parameters": [
        {
          "doc": "reference to the script state to be used for storing data (script_ref)", 
          "name": "self"
        }, 
        {
          "doc": "the time-step of the frame update", 
          "name": "dt"
        }
      ], 
      "brief": "called every frame to update the script component", 
      "examples": "<p>\nThis example demonstrates how to move a game object instance through the script component:\n</p>\n<pre>\nfunction init(self)\n    -- set initial velocity to be 1 along world x-axis\n    self.my_velocity = vmath.vector3(1, 0, 0)\nend\n\nfunction update(self, dt)\n    -- move the game object instance\n    go.set_position(go.get_position() + dt * self.my_velocity)\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "update"
    }
  ]
}