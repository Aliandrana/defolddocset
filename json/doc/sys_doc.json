{
  "elements": [
    {
      "description": "<p>\nReturns a table with the following members:\ninstalled.\n</p>", 
      "parameters": [], 
      "brief": "get application information", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "table with application information", 
      "name": "sys.get_application_info"
    }, 
    {
      "description": "Get config value from the game.project configuration file.", 
      "parameters": [
        {
          "doc": "key to get value for. The syntax is SECTION.KEY", 
          "name": "key"
        }
      ], 
      "brief": "get config value", 
      "examples": "<p>\nGet display width\n</p>\n<pre>\nlocal width = tonumber(sys.get_config(\"display.width\"))\n</pre>", 
      "type": "FUNCTION", 
      "return_": "config value as a string. nil if the config key doesn't exists", 
      "name": "sys.get_config"
    }, 
    {
      "description": "Get config value from the game.project configuration file with default value", 
      "parameters": [
        {
          "doc": "key to get value for. The syntax is SECTION.KEY", 
          "name": "key"
        }, 
        {
          "doc": "default value to return if the value does not exist", 
          "name": "default_value"
        }
      ], 
      "brief": "get config value with default value", 
      "examples": "<p>\nGet user config value\n</p>\n<pre>\nlocal speed = tonumber(sys.get_config(\"my_game.speed\", \"10.23\"))\n</pre>", 
      "type": "FUNCTION", 
      "return_": "config value as a string. default_value if the config key does not exist", 
      "name": "sys.get_config"
    }, 
    {
      "description": "", 
      "parameters": [], 
      "brief": "get current network connectivity status", 
      "examples": "<p>\nCheck if we are connected through a cellular connection\n</p>\n<pre>\n if (sys.NETWORK_CONNECTED_CELLULAR == sys.get_connectivity()) then\n     print(\"Connected via cellular, avoid downloading big files!\")\n end\n</pre>", 
      "type": "FUNCTION", 
      "return_": "sys.NETWORK_DISCONNECTED if no network connection is found, sys.NETWORK_CONNECTED_CELLULAR if connected through mobile cellular, otherwise sys.NETWORK_CONNECTED", 
      "name": "sys.get_connectivity"
    }, 
    {
      "description": "<p>\nReturns a table with the following members:\nversion, engine_sha1.\n</p>", 
      "parameters": [], 
      "brief": "get engine information", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "table with engine information", 
      "name": "sys.get_engine_info"
    }, 
    {
      "description": "returns an array of tables with the following members:\nname, address (ip-string), mac (hardware address, colon separated string), up (bool), running (bool). NOTE: ip and mac might be nil if not available", 
      "parameters": [], 
      "brief": "enumerate network cards", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "an array of tables", 
      "name": "sys.get_ifaddrs"
    }, 
    {
      "description": "The save-file path is operating system specific and is typically located under the users home directory.", 
      "parameters": [
        {
          "doc": "user defined id of the application, which helps define the location of the save-file (string)", 
          "name": "application_id"
        }, 
        {
          "doc": "file-name to get path for (string)", 
          "name": "file_name"
        }
      ], 
      "brief": "gets the save-file path", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "path to save-file (string)", 
      "name": "sys.get_save_file"
    }, 
    {
      "description": "<p>\nReturns a table with the following members:\ndevice_model, manufacturer, system_name, system_version, language, device_language, territory, gmt_offset (minutes), device_ident, ad_ident and ad_tracking_enabled.\n</p>\n<p><code>device_model</code> and <code>manufacturer</code> is currently only available on iOS and Android.</p>\n<p><code>language</code> is in ISO-639 format (two characters) and <code>territory</code> in ISO-3166 format (two characters).</p>\n<p><code>device_language</code> is in ISO-639 format (two characters) and if applicable by a dash (-) and an ISO 15924 script code. Reflects device preferred language.</p>\n<p><code>device_ident</code> is \"identifierForVendor\" and <code>ad_ident</code> is \"advertisingIdentifier\" on iOS</p>\n<p><code>device_ident</code> is \"android_id\" and <code>ad_ident</code> is advertising ID provided by Google Play on Android.</p>", 
      "parameters": [], 
      "brief": "get system information", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "table with system information", 
      "name": "sys.get_sys_info"
    }, 
    {
      "description": "If the file exists, it must have been created by <code>sys.save</code> to be loaded.", 
      "parameters": [
        {
          "doc": "file to read from (string)", 
          "name": "filename"
        }
      ], 
      "brief": "loads a lua table from a file on disk", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "loaded lua table, which is empty if the file could not be found (table)", 
      "name": "sys.load"
    }, 
    {
      "description": "Loads a custom resource. Specify the full filename of the resource that you want\nto load. When loaded, it is returned as a string.\n\nIn order for the engine to include custom resources in the build process, you need\nto specify them in the \"game.project\" settings file:\n<pre>\n[project]\ntitle = My project\nversion = 0.1\ncustom_resources = main/data/,assets/level_data.json\n</pre>", 
      "parameters": [
        {
          "doc": "resource to load, full path (string)", 
          "name": "filename"
        }
      ], 
      "brief": "loads resource from game data", 
      "examples": "<pre>\n-- Load level data into a string\nlocal data = sys.load_resource(\"/assets/level_data.json\")\n-- Decode json string to a Lua table\nlocal data_table = json.decode(data)\npprint(data_table)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "loaded data, which is empty if the file could not be found (string)", 
      "name": "sys.load_resource"
    }, 
    {
      "description": "Open URL in default application, typically a browser", 
      "parameters": [
        {
          "doc": "url to open", 
          "name": "url"
        }
      ], 
      "brief": "open url in default application", 
      "examples": "", 
      "type": "FUNCTION", 
      "return_": "a boolean indicating if the url could be opened or not", 
      "name": "sys.open_url"
    }, 
    {
      "description": "The table can later be loaded by <code>sys.load</code>.\nUse <code>sys.get_save_file</code> to obtain a valid location for the file.\nInternally, this function uses a workspace buffer sized output file sized 128kb. This size reflects the output file size which must not exceed this limit.\nAdditionally, the total number of rows that any one table may contain is limited to 65536 (i.e. a 16 bit range). When tables are used to represent arrays, the values of\nkeys are permitted to fall within a 32 bit range, supporting sparse arrays, however the limit on the total number of rows remains in effect.", 
      "parameters": [
        {
          "doc": "file to write to (string)", 
          "name": "filename"
        }, 
        {
          "doc": "lua table to save (table)", 
          "name": "table"
        }
      ], 
      "brief": "saves a lua table to a file stored on disk", 
      "examples": "<p>\nSave data:\n</p>\n<pre>\nlocal my_table = {}\ntable.add(my_table, \"my_value\")\nlocal my_file_path = sys.get_save_file(\"my_game\", \"my_file\")\nif not sys.save(my_file_path, my_table) then\n    -- Alert user that the data could not be saved\nend\n</pre>\n<p>\nAnd load it at a later time, e.g. next game session:\n</p>\n<pre>\nlocal my_file_path = sys.get_save_file(\"my_game\", \"my_file\")\nlocal my_table = sys.load(my_file_path)\nif not next(my_table) then\n    -- empty table\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "a boolean indicating if the table could be saved or not (boolean)", 
      "name": "sys.save"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "hostname to check against", 
          "name": "host"
        }
      ], 
      "brief": "set host to check for network connectivity against", 
      "examples": "<pre>\n sys.set_connectivity_host(\"www.google.com\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "sys.set_connectivity_host"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "the function to be called on error", 
          "name": "error_handler"
        }
      ], 
      "brief": "set the error handler. The error handler is a function which is called whenever a lua runtime error occurs.", 
      "examples": "<p>\nInstall error handler that just prints the errors\n</p>\n<pre>\n sys.set_error_handler(function(source, message, traceback)\n     print(\"source: \" .. source);\n     print(\"message: \" .. message);\n     print(\"traceback: \" .. traceback);\n end)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "sys.set_error_handler"
    }
  ]
}