{
  "elements": [
    {
      "description": "Send this message to a tile map component to change the tile in one of its cells.\n\nDEPRECATED! Use <code>tilemap.set_tile()</code> instead.", 
      "parameters": [
        {
          "doc": "id of the layer for which to change a tile", 
          "name": "layer_id"
        }, 
        {
          "doc": "the position of the cell for which to change the tile (world space)", 
          "name": "position"
        }, 
        {
          "doc": "index of the tile to change to in the tile set, 1 for the first tile and 0 to clear the tile (0 by default)", 
          "name": "tile"
        }, 
        {
          "doc": "horizontal offset from the supplied position to the requested cell (grid space, 0 by default)", 
          "name": "dx"
        }, 
        {
          "doc": "vertical offset from the supplied position to the requested cell (grid space, 0 by default)", 
          "name": "dy"
        }
      ], 
      "brief": "(DEPRECATED) changes a tile in a tile map", 
      "examples": "<p>\nThis example demonstrates how to clear the tile above the instance when it collides with that tile from underneath,\ni.e. the same thing that would happen in Super Mario Bros.\n</p>\n\n<p>\nAssuming the instance we collide with has a tile map component with id \"tilemap\", which has a layer with id \"layer1\":\n</p>\n<pre>\nfunction on_message(self, message_id, message, sender)\n    if message_id == hash(\"contact_point_response\") then\n        -- check if the normal points down-wards\n        if message.normal.y < -0.5 then\n            msg.post(msg.url(nil, message.other_id, \"tilemap\"), \"set_tile\", {layer_id = hash(\"layer1\"), position = go.get_position(), dy = 1})\n        end\n    end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "set_tile"
    }, 
    {
      "description": "Get the tile set at the specified position in the tilemap. The returned tile to set is identified\nby its index starting with 1 in the top left corner of the tile set. The coordinates of the tile is\n1-indexed (see <code>tilemap.set_tile()</code>) Which tile map and layer to query is identified by\nthe URL and the layer name parameters.", 
      "parameters": [
        {
          "doc": "the tile map (url)", 
          "name": "url"
        }
      ], 
      "brief": "get the bounds of a tile map", 
      "examples": "<pre>\n-- get the level bounds.\nlocal x, y, w, h = tilemap.get_bounds(\"/level#tilemap\")\n</pre>", 
      "type": "FUNCTION", 
      "return_": "number of rows in the tile map (number)", 
      "name": "tilemap.get_bounds"
    }, 
    {
      "description": "Get the tile set at the specified position in the tilemap. The returned tile to set is identified\nby its index starting with 1 in the top left corner of the tile set, or 0 if the tile is blank.\nThe coordinates of the tile is 1-indexed (see <code>tilemap.set_tile()</code>)\nWhich tile map and layer to query is identified by the URL and the layer name parameters.", 
      "parameters": [
        {
          "doc": "the tile map (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the layer (string|hash)", 
          "name": "name"
        }, 
        {
          "doc": "of the tile (number)", 
          "name": "x-coordinate"
        }, 
        {
          "doc": "of the tile (number)", 
          "name": "y-coordinate"
        }
      ], 
      "brief": "get a tile from a tile map", 
      "examples": "<pre>\n-- get the tile under the player.\nlocal tileno = tilemap.get_tile(\"/level#tilemap\", \"foreground\", self.player_x, self.player_y)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "index of the tile (number)", 
      "name": "tilemap.get_tile"
    }, 
    {
      "description": "The constant must be defined in the material assigned to the tile map.\nResetting a constant through this function implies that the value defined in the material will be used.\nWhich tile map to reset a constant for is identified by the URL.", 
      "parameters": [
        {
          "doc": "the tile map that should have a constant reset (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the constant (string|hash)", 
          "name": "name"
        }
      ], 
      "brief": "reset a shader constant for a tile map", 
      "examples": "<p>\nThe following examples assumes that the tile map has id \"tilemap\" and that the default-material in builtins is used.\nIf you assign a custom material to the tile map, you can reset the constants defined there in the same manner.\n</p>\n<p>\nHow to reset the tinting of a tile map:\n</p>\n<pre>\nfunction init(self)\n    tilemap.reset_constant(\"#tilemap\", \"tint\")\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "tilemap.reset_constant"
    }, 
    {
      "description": "The constant must be defined in the material assigned to the tile map.\nSetting a constant through this function will override the value set for that constant in the material.\nThe value will be overridden until tilemap.reset_constant is called.\nWhich tile map to set a constant for is identified by the URL.", 
      "parameters": [
        {
          "doc": "the tile map that should have a constant set (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the constant (string|hash)", 
          "name": "name"
        }, 
        {
          "doc": "of the constant (vec4)", 
          "name": "value"
        }
      ], 
      "brief": "set a shader constant for a tile map", 
      "examples": "<p>\nThe following examples assumes that the tile map has id \"tile map\" and that the default-material in builtins is used.\nIf you assign a custom material to the tile map, you can set the constants defined there in the same manner.\n</p>\n<p>\nHow to tint a tile map to red:\n</p>\n<pre>\nfunction init(self)\n    tilemap.set_constant(\"#tilemap\", \"tint\", vmath.vector4(1, 0, 0, 1))\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "tilemap.set_constant"
    }, 
    {
      "description": "Replace a tile in a tile map with a new tile. The coordinates of the tile is 1-indexed so a 4 by 4\ntile map centered around origo has the following x,y coordinates:\n<pre>\n+-------+-------+------+------+\n| -2,1  | -1,1  | 0,1  | 1,1  |\n+-------+-------+------+------+\n| -2,0  | -1,0  | 0,0  | 1,0  |\n+-------+-------O------+------+\n| -2,-1 | -1,-1 | 0,-1 | 1,-1 |\n+-------+-------+------+------+\n| -2,-2 | -1,-2 | 0,-2 | 1,-2 |\n+-------+-------+------+------+\n</pre>\nThe coordinates must be within the bounds of the tile map as it were created. That is, it is not\npossible to extend the size of a tile map by setting tiles outside the edges.\nThe tile to set is identified by its index starting with 1 in the top left corner of the tile set.\nTo clear a tile, set the tile to number 0. Which tile map and layer to manipulate is identified by\nthe URL and the layer name parameters.", 
      "parameters": [
        {
          "doc": "the tile map (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the layer (string|hash)", 
          "name": "name"
        }, 
        {
          "doc": "of the tile (number)", 
          "name": "x-coordinate"
        }, 
        {
          "doc": "of the tile (number)", 
          "name": "y-coordinate"
        }, 
        {
          "doc": "tile to set (number)", 
          "name": "new"
        }, 
        {
          "doc": "if the tile should be horizontally flipped (boolean)", 
          "name": "optional"
        }, 
        {
          "doc": "i the tile should be vertically flipped (boolean)", 
          "name": "optional"
        }
      ], 
      "brief": "set a tile in a tile map", 
      "examples": "<pre>\n-- Clear the tile under the player.\ntilemap.set_tile(\"/level#tilemap\", \"foreground\", self.player_x, self.player_y, 0)\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "tilemap.set_tile"
    }
  ]
}