{
  "elements": [
    {
      "description": "", 
      "parameters": [
        {
          "doc": "the spine model for which to cancel the animation (url)", 
          "name": "url"
        }
      ], 
      "brief": "cancel all animation on a spine model", 
      "examples": "<p>\nThe following examples assumes that the spine model has id \"spinemodel\".\n</p>\n<p>\nHow to cancel all animation:\n</p>\n<pre>\nfunction init(self)\n    spine.cancel(\"#spinemodel\")\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.cancel"
    }, 
    {
      "description": "The returned game object can be used for parenting and transform queries.\nThis function has complexity O(n), where n is the number of bones in the spine model skeleton.\nGame objects corresponding to a spine model skeleton bone can not be individually deleted.\nOnly available from .script files.", 
      "parameters": [
        {
          "doc": "the spine model to query (url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the corresponding bone (string|hash)", 
          "name": "bone_id"
        }
      ], 
      "brief": "retrieve the game object corresponding to a spine model skeleton bone", 
      "examples": "<p>\nThe following examples assumes that the spine model has id \"spinemodel\".\n<p>\nHow to parent the game object of the calling script to the \"right_hand\" bone of the spine model in a player game object:\n</p>\n<pre>\nfunction init(self)\n    local parent = spine.get_go(\"player#spinemodel\", \"right_hand\")\n    msg.post(\".\", \"set_parent\", {parent_id = parent})\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "id of the game object", 
      "name": "spine.get_go"
    }, 
    {
      "description": "", 
      "parameters": [
        {
          "doc": "the spine model for which to play the animation (url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the animation to play (string|hash)", 
          "name": "animation_id"
        }, 
        {
          "doc": "playback mode of the animation (constant)\n<ul>\n  <li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n  <li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n  <li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n  <li><code>go.PLAYBACK_LOOP_FORWARD</code></li>\n  <li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>\n  <li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>", 
          "name": "playback"
        }, 
        {
          "doc": "duration of a linear blend between the current and new animations", 
          "name": "blend_duration"
        }, 
        {
          "doc": "function to call when the animation has completed (function)", 
          "name": "[complete_function]"
        }
      ], 
      "brief": "play an animation on a spine model", 
      "examples": "<p>\nThe following examples assumes that the spine model has id \"spinemodel\".\n</p>\n<p>\nHow to play the \"jump\" animation followed by the \"run\" animation:\n</p>\n<pre>\nfunction init(self)\n    local url = msg.url(\"#spinemodel\")\n    -- first blend during 0.1 sec into the jump, then during 0.2 s into the run animation\n    spine.play(url, \"jump\", go.PLAYBACK_ONCE_FORWARD, 0.1, function (self)\n        spine.play(url, \"run\", go.PLAYBACK_LOOP_FORWARD, 0.2)\n    end)\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.play"
    }, 
    {
      "description": "The constant must be defined in the material assigned to the spine model.\nResetting a constant through this function implies that the value defined in the material will be used.\nWhich spine model to reset a constant for is identified by the URL.", 
      "parameters": [
        {
          "doc": "the spine model that should have a constant reset (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the constant (string|hash)", 
          "name": "name"
        }
      ], 
      "brief": "reset a shader constant for a spine model", 
      "examples": "<p>\nThe following examples assumes that the spine model has id \"spinemodel\" and that the default-material in builtins is used.\nIf you assign a custom material to the spine model, you can reset the constants defined there in the same manner.\n</p>\n<p>\nHow to reset the tinting of a spine model:\n</p>\n<pre>\nfunction init(self)\n    spine.reset_constant(\"#spinemodel\", \"tint\")\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.reset_constant"
    }, 
    {
      "description": "The constant must be defined in the material assigned to the spine model.\nSetting a constant through this function will override the value set for that constant in the material.\nThe value will be overridden until spine.reset_constant is called.\nWhich spine model to set a constant for is identified by the URL.", 
      "parameters": [
        {
          "doc": "the spine model that should have a constant set (url)", 
          "name": "url"
        }, 
        {
          "doc": "of the constant (string|hash)", 
          "name": "name"
        }, 
        {
          "doc": "of the constant (vec4)", 
          "name": "value"
        }
      ], 
      "brief": "set a shader constant for a spine model", 
      "examples": "<p>\nThe following examples assumes that the spine model has id \"spinemodel\" and that the default-material in builtins is used.\nIf you assign a custom material to the spine model, you can set the constants defined there in the same manner.\n</p>\n<p>\nHow to tint a spine model to red:\n</p>\n<pre>\nfunction init(self)\n    spine.set_constant(\"#spinemodel\", \"tint\", vmath.vector4(1, 0, 0, 1))\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.set_constant"
    }, 
    {
      "description": "Only available from .script files.", 
      "parameters": [
        {
          "doc": "the spine model containing the object (url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the corresponding IK constraint object (string|hash)", 
          "name": "ik_constraint_id"
        }, 
        {
          "doc": "target game object (url)", 
          "name": "target_url"
        }
      ], 
      "brief": "set the IK constraint object target position to follow position of a game object", 
      "examples": "<p>\nThe following example assumes that the spine model has id \"spinemodel\".\n<p>\nHow to set the target IK position of the right_hand_constraint constraint object of the player object\nto follow the position of game object with url \"some_game_object\"\n</p>\n<pre>\nfunction init(self)\n    spine.set_ik_target(\"player#spinemodel\", \"right_hand_constraint\", \"some_game_object\")\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.set_ik_target"
    }, 
    {
      "description": "Only available from .script files.", 
      "parameters": [
        {
          "doc": "the spine model containing the object (url)", 
          "name": "url"
        }, 
        {
          "doc": "id of the corresponding IK constraint object (string|hash)", 
          "name": "ik_constraint_id"
        }, 
        {
          "doc": "(vec3)", 
          "name": "position"
        }
      ], 
      "brief": "set the target position of an IK constraint object", 
      "examples": "<p>\nThe following example assumes that the spine model has id \"spinemodel\".\n<p>\nHow to set the target IK position of the right_hand_constraint constraint object of the player object\n</p>\n<pre>\nfunction init(self)\n    spine.set_ik_target_position(\"player#spinemodel\", \"right_hand_constraint\", vmath.vector3(1,2,3))\nend\n</pre>", 
      "type": "FUNCTION", 
      "return_": "", 
      "name": "spine.set_ik_target_position"
    }, 
    {
      "description": "<p>\nThis message is sent when a Spine animation has finished playing back to the script\nthat started the animation. This message is sent only for animations that play with\nthe following playback modes and no message is sent if the animation is cancelled with\nspine.cancel():\n<ul>\n <li>go.PLAYBACK_ONCE_FORWARD</li>\n <li>go.PLAYBACK_ONCE_BACKWARD</li>\n <li>go.PLAYBACK_ONCE_PINGPONG</li>\n</ul>\n</p>", 
      "parameters": [
        {
          "doc": "the id of the completed animation (hash)", 
          "name": "animation_id"
        }, 
        {
          "doc": "the playback mode of the completed animation (constant)", 
          "name": "playback"
        }
      ], 
      "brief": "reports the completion of a Spine animation", 
      "examples": "<pre>\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"spine_animation_done\") then\n    if message.animation_id == hash(\"run\") and message.playback == go.PLAYBACK_ONCE_FORWARD then\n      -- The animation \"run\" has finished running forward.\n      ...\n    end\n  end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "spine_animation_done"
    }, 
    {
      "description": "<p>\nThis message is sent when Spine animation playback fires events. These events\nhas to be defined on the animation track in the Spine animation editor. An event\ncan contain custom values expressed in the fields \"integer\", \"float\" and \"string\".\n</p>", 
      "parameters": [
        {
          "doc": "the id of the event (hash)", 
          "name": "event_id"
        }, 
        {
          "doc": "the id of the animation (hash)", 
          "name": "animation_id"
        }, 
        {
          "doc": "the time of the event in seconds, relative to the start of the animation (number)", 
          "name": "t"
        }, 
        {
          "doc": "the blend weight (between 0.0-1.0) of the current animation at time t (number)", 
          "name": "blend_weight"
        }, 
        {
          "doc": "user defined integer value for the event (number)", 
          "name": "integer"
        }, 
        {
          "doc": "user defined floating point value for the event (number)", 
          "name": "float"
        }, 
        {
          "doc": "user defined string value for the event (hash)", 
          "name": "string"
        }
      ], 
      "brief": "reports an incoming event from the Spine animation", 
      "examples": "<p>\nThe following example assumes that an animation sends event messages with the id \"footstep\"\nand that the \"integer\" field is used to distinguish between left and right foot (values 0 and 1).\n</p>\n<pre>\nfunction on_message(self, message_id, message, sender)\n  if message_id == hash(\"spine_event\") then\n    -- Receiving animation event from Spine. Play footsteps.\n    if message.event_id == hash(\"footstep\") and message.integer == 0 then\n      msg.post(\"#sound_footstep_right\", \"play_sound\")\n    elseif message.event_id == hash(\"footstep\") and message.integer == 1 then\n      msg.post(\"#sound_footstep_left\", \"play_sound\")\n  end\nend\n</pre>", 
      "type": "MESSAGE", 
      "return_": "", 
      "name": "spine_event"
    }
  ]
}